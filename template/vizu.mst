<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Github Insight - Résultat d'analyse</title>

  <link href="https://cdn.rawgit.com/novus/nvd3/v1.8.1/build/nv.d3.css" rel="stylesheet" type="text/css">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
</head>

<body>
  <div class="container bg-light">
    <h1>Github Insight</h1>
    <h2>Résultat d'analyse</h2>

    <div class="row">
      <div class="col">
        <div class="card text-center">
          <h5 class="card-title">Top des languages des repos de l'organization</h5>
          <div class="card-body"><svg id="topLangagesOrgaChart"></svg></div>
        </div>
      </div>

      <div class="col">
        <div class="card text-center">
          <h5 class="card-title">Top des languages des repos des users de l'organization</h5>
          <div class="card-body"><svg id="topLangagesUserChart"></svg></div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col">
        <div class="card text-center">
          <h5 class="card-title">Meilleur repo utilisateur</h5>
          <div class="card-body"><svg id="topUserRepoChart"></svg></div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col">
        <div class="card text-center">
          <h5 class="card-title">Meilleur repo orga</h5>
          <div class="card-body"><svg id="topOrgaRepoChart"></svg></div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col">
        <select class="form-control" id="language-select" onchange="selectLanguage(event)" style="width:25%">
          {{#languages}}
          <option value="{{.}}">{{.}}</option>
          {{/languages}}
        </select>
        <div class="card text-center">
          <h5 class="card-title">Evolution du js dans l'organisation</h5>
          <div class="card-body"><svg id="EvolLangageChart"></svg></div>
        </div>
      </div>
    </div>

    <div class="alert alert-info">
      Pour suprimer les recherches liées à cette clé : cliquer <a href="/demandeDelete">ici</a>
    </div>
  </div>

  {{! Scripts }}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js" charset="utf-8"></script>
  <script src="https://cdn.rawgit.com/novus/nvd3/v1.8.1/build/nv.d3.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  <script>
    var data = {{{ stats }}};
    var evolLanguageChart;

    function selectLanguage(e) {
      changeLanguage(e.target.value);
    }

    function changeLanguage(language) {
      nv.addGraph(function () {
        evolLanguageChart = nv.models.lineChart()
          .margin({ left: 100 })  //Adjust chart margins to give the x-axis some breathing room.
          .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
          .duration(350)  //how fast do you want the lines to transition?
          .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
          .showYAxis(true)        //Show the y-axis
          .showXAxis(true)        //Show the x-axis
          ;

        evolLanguageChart.xAxis     //Chart x-axis settings
          .axisLabel('Temps')
          .tickFormat(d3.format(',r'));

        evolLanguageChart.yAxis     //Chart y-axis settings
          .axisLabel('Nombre de projets')
          .tickFormat(d3.format('s'));

        d3.select('#EvolLangageChart')    //Select the <svg> element you want to render the chart in.   
          .datum(getLineData(language))         //Populate the <svg> element with chart data...
          .call(evolLanguageChart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { evolLanguageChart.update() });
        return evolLanguageChart;
      });
    }

    // Top langage chart
    let topLanguageOrgaData = [];
    data[data.length - 1].analyse.topLanguageOrga.forEach((langage) => {
      topLanguageOrgaData.push({
        key: Object.keys(langage)[0],
        y: langage[Object.keys(langage)[0]]
      });
    });

    let topLanguageUserData = [];
    data[data.length - 1].analyse.topLanguageUser.forEach((langage) => {
      topLanguageUserData.push({
        key: Object.keys(langage)[0],
        y: langage[Object.keys(langage)[0]]
      });
    });

    // Top user chart
    let topUserRepoData = [];
    data[data.length - 1].analyse.topOrgaUserRepo.map(repo => {
      topUserRepoData.push({
        key: Object.keys(repo)[0],
        y: repo[Object.keys(repo)[0]]
      });
    });

    // Top user chart
    let topOrgaRepoData = [];
    data[data.length - 1].analyse.topOrgaRepo.map(repo => {
      topOrgaRepoData.push({
        key: Object.keys(repo)[0],
        y: repo[Object.keys(repo)[0]]
      });
    });

    function getLineData(language) {
      let lineData;
      let evolOrgaData = [];
      let i = 0;
      data.forEach((row) => {
        let y;
        row.analyse.topLanguageOrga.map((obj) => {
          if (Object.keys(obj) == language) {
            y = obj[language];
          }
        })
        y = y || 0;
        evolOrgaData.push({ x: i, y: y });
        i++;
      });

      let evolUserData = [];
      i = 0;
      data.forEach((row) => {
        let y;
        row.analyse.topLanguageUser.map((obj) => {
          if (Object.keys(obj) == language) {
            y = obj[language];
          }
        })
        y = y || 0;
        evolUserData.push({ x: i, y: y });
        i++;
      })

      return lineData = [{
        values: evolOrgaData,      //values - represents the array of {x,y} data points
        key: 'OrgaData', //key  - the name of the series.
        color: '#ff7f0e'  //color - optional: choose your own line color.
      },
      {
        values: evolUserData,      //values - represents the array of {x,y} data points
        key: 'UserData', //key  - the name of the series.
        color: '#2ca02c'  //color - optional: choose your own line color.
      }]
    }

    // Langage orga chart
    nv.addGraph(function () {
      var chart = nv.models.pie()
        .x(function (d) { return d.key; })
        .y(function (d) { return d.y; })
        .labelType(function (d, i, values) {
          return values.key + ':' + values.value;
        })
        ;

      d3.select("#topLangagesOrgaChart")
        .datum([topLanguageOrgaData])
        .transition().duration(1200)
        .attr('width', 200)
        .attr('height', 200)
        .call(chart);
      return chart;
    });

    // Langage user chart
    nv.addGraph(function () {
      var chart = nv.models.pie()
        .x(function (d) { return d.key; })
        .y(function (d) { return d.y; })
        .labelType(function (d, i, values) {
          return values.key + ':' + values.value;
        })
        ;

      d3.select("#topLangagesUserChart")
        .datum([topLanguageUserData])
        .transition().duration(1200)
        .attr('width', 200)
        .attr('height', 200)
        .call(chart);
      return chart;
    });

    // Top orga / user repo chart
    nv.addGraph(function () {
      var chart = nv.models.discreteBarChart()
        .x(function (d) { return d.key; })
        .y(function (d) { return d.y; })
        .showValues(true)
        .staggerLabels(true);

      d3.select("#topUserRepoChart")
        .datum([{values: topUserRepoData}])
        .transition().duration(1200)
        .call(chart);
      return chart;
    });

    nv.addGraph(function () {
      var chart = nv.models.discreteBarChart()
        .x(function (d) { return d.key; })
        .y(function (d) { return d.y; })
        .showValues(true)
        .staggerLabels(true);

      d3.select("#topOrgaRepoChart")
        .datum([{values: topOrgaRepoData}])
        .transition().duration(1200)
        .call(chart);
      return chart;
    });

    changeLanguage(document.getElementById("language-select").value);
  </script>
</body>

</html>