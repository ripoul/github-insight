<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Formulaire de demande d'annalyse</title>

  <link href="https://cdn.rawgit.com/novus/nvd3/v1.8.1/build/nv.d3.css" rel="stylesheet" type="text/css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js" charset="utf-8"></script>
  <script src="https://cdn.rawgit.com/novus/nvd3/v1.8.1/build/nv.d3.min.js"></script>

  <style>
    text {
      font: 12px sans-serif;
    }

    .testBlock {
      display: inline-block;
      height: 300px;
      width: 300px;
      margin: 15px;
    }

    html,
    body {
      margin: 0px;
      padding: 0px;
      height: 100%;
      width: 100%;
    }
  </style>
</head>

<body>
  <div>
    <div class="testBlock">Top des languages des repos de l'organization : <svg id="topLangagesOrgaChart"></svg></div>
    <div class="testBlock">Top des languages des repos des users de l'organization : <svg
        id="topLangagesUserChart"></svg></div>
  </div>
  <div>
    <div>
      <select id="language-select">
        <option value="JavaScript">JavaScript</option>
        <option value="Java">Java</option>
      </select>
    </div>
    <div class="testBlock">Evolution du js dans l'organisation : <svg id="EvolLangageJSChart"></svg></div>
    <div class="testBlock">Evolution du java dans l'organisation : <svg id="EvolLangageJavaChart"></svg></div>
  </div>
  <script>
    var data = {{{ stats }}};

    // Top langage chart
    (function () {
      let topLanguageOrgaData = [];
      data[data.length - 1].analyse.topLanguageOrga.forEach((langage) => {
        topLanguageOrgaData.push({
          key: Object.keys(langage)[0],
          y: langage[Object.keys(langage)[0]]
        });
      });

      let topLanguageUserData = [];
      data[data.length - 1].analyse.topLanguageUser.forEach((langage) => {
        topLanguageUserData.push({
          key: Object.keys(langage)[0],
          y: langage[Object.keys(langage)[0]]
        });
      });

      function getLineData(language) {
        let lineDataJS;
        let evolJSOrgaData = [];
        let i = 0;
        data.forEach((row) => {
          let y;
          row.analyse.topLanguageOrga.map((obj) => {
            if (Object.keys(obj) == language) {
              y = obj[language];
            }
          })
          y == null ? 0 : y;
          evolJSOrgaData.push({ x: i, y: y });
          i++;
        });

        let evolJSUserData = [];
        i = 0;
        data.forEach((row) => {
          let y;
          row.analyse.topLanguageUser.map((obj) => {
            if (Object.keys(obj) == language) {
              y = obj[language];
            }
          })
          y == null ? 0 : y;
          evolJSUserData.push({ x: i, y: y });
          i++;
        })
        return lineDataJS = [{
          values: evolJSOrgaData,      //values - represents the array of {x,y} data points
          key: 'OrgaData', //key  - the name of the series.
          color: '#ff7f0e'  //color - optional: choose your own line color.
        },
        {
          values: evolJSUserData,      //values - represents the array of {x,y} data points
          key: 'UserData', //key  - the name of the series.
          color: '#2ca02c'  //color - optional: choose your own line color.
        }]
      }

      var width = 300;
      var height = 300;

      nv.addGraph(function () {
        var chart = nv.models.pie()
          .x(function (d) { return d.key; })
          .y(function (d) { return d.y; })
          .width(width)
          .height(height)
          .labelType(function (d, i, values) {
            return values.key + ':' + values.value;
          })
          ;

        d3.select("#topLangagesOrgaChart")
          .datum([topLanguageOrgaData])
          .transition().duration(1200)
          .attr('width', width)
          .attr('height', height)
          .call(chart);
        return chart;
      });

      nv.addGraph(function () {
        var chart = nv.models.pie()
          .x(function (d) { return d.key; })
          .y(function (d) { return d.y; })
          .width(width)
          .height(height)
          .labelType(function (d, i, values) {
            return values.key + ':' + values.value;
          })
          ;

        d3.select("#topLangagesUserChart")
          .datum([topLanguageUserData])
          .transition().duration(1200)
          .attr('width', width)
          .attr('height', height)
          .call(chart);
        return chart;
      });

      nv.addGraph(function () {
        var chart = nv.models.lineChart()
          .margin({ left: 100 })  //Adjust chart margins to give the x-axis some breathing room.
          .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
          .duration(350)  //how fast do you want the lines to transition?
          .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
          .showYAxis(true)        //Show the y-axis
          .showXAxis(true)        //Show the x-axis
          ;

        chart.xAxis     //Chart x-axis settings
          .axisLabel('Time (ms)')
          .tickFormat(d3.format(',r'));

        chart.yAxis     //Chart y-axis settings
          .axisLabel('Voltage (v)')
          .tickFormat(d3.format('.02f'));

        d3.select('#EvolLangageJSChart')    //Select the <svg> element you want to render the chart in.   
          .datum(getLineData('JavaScript'))         //Populate the <svg> element with chart data...
          .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
      });

      nv.addGraph(function () {
        var chart = nv.models.lineChart()
          .margin({ left: 100 })  //Adjust chart margins to give the x-axis some breathing room.
          .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
          .duration(350)  //how fast do you want the lines to transition?
          .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
          .showYAxis(true)        //Show the y-axis
          .showXAxis(true)        //Show the x-axis
          ;

        chart.xAxis     //Chart x-axis settings
          .axisLabel('Time (ms)')
          .tickFormat(d3.format(',r'));

        chart.yAxis     //Chart y-axis settings
          .axisLabel('Voltage (v)')
          .tickFormat(d3.format('.02f'));

        d3.select('#EvolLangageJavaChart')    //Select the <svg> element you want to render the chart in.   
          .datum(getLineData('Java'))         //Populate the <svg> element with chart data...
          .call(chart);          //Finally, render the chart!

        //Update the chart when window resizes.
        nv.utils.windowResize(function () { chart.update() });
        return chart;
      });
    })();
  </script>
</body>

</html>